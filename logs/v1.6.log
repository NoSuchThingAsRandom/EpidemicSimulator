warning: Patch `quadtree_rs v0.1.2 (https://github.com/NoSuchThingAsRandom/quadtree/#321fcd31)` was not used in the crate graph.
Check that the patched package version and available features are compatible
with the dependency requirements. If the patch has a different version from
what is locked in the Cargo.lock file, run `cargo update` to use the new
version. This may also occur with an optional dependency that is not enabled.
warning: unused import: `PreProcessingWorkplaceResidentialTrait`
  --> load_census_data/src/lib.rs:42:129
   |
42 | ...ecord, PreProcessingWorkplaceResidentialRecord, PreProcessingWorkplaceResidentialTrait, WorkplaceResidentialRecord};
   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::any::Any`
  --> load_census_data/src/tables/mod.rs:21:5
   |
21 | use std::any::Any;
   |     ^^^^^^^^^^^^^

warning: unused import: `std::any::Any`
  --> load_census_data/src/tables/resides_vs_workplace.rs:20:5
   |
20 | use std::any::Any;
   |     ^^^^^^^^^^^^^

warning: unused import: `serde::de::DeserializeOwned`
  --> load_census_data/src/tables/resides_vs_workplace.rs:24:5
   |
24 | use serde::de::DeserializeOwned;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unreachable statement
   --> load_census_data/src/lib.rs:349:9
    |
348 |           panic!("Loaded data");
    |           --------------------- any code following this expression is unreachable
349 | /         debug!(
350 | |             "Built {} residential workplace areas with {} records",
351 | |             residents_workplace.len(),
352 | |             residents_workplace
...   |
355 | |                 .sum::<usize>()
356 | |         );
    | |_________^ unreachable statement
    |
    = note: `#[warn(unreachable_code)]` on by default
    = note: this warning originates in the macro `log` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `residents`
   --> load_census_data/src/lib.rs:232:13
    |
232 |         let residents = WorkplaceResidentialRecord::try_from(&vec![f]);
    |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_residents`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `population_counts`
   --> load_census_data/src/lib.rs:347:14
    |
347 | ...   let (population_counts, age_counts, occupation_counts, residents_workplace) = (population_counts.expect("Population Counts Table ha...
    |            ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_population_counts`

warning: unused variable: `age_counts`
   --> load_census_data/src/lib.rs:347:33
    |
347 | ...   let (population_counts, age_counts, occupation_counts, residents_workplace) = (population_counts.expect("Population Counts Table ha...
    |                               ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_age_counts`

warning: unused variable: `occupation_counts`
   --> load_census_data/src/lib.rs:347:45
    |
347 | ...unts, age_counts, occupation_counts, residents_workplace) = (population_counts.expect("Population Counts Table has not been loaded"), ...
    |                      ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_occupation_counts`

warning: unused variable: `residents_workplace`
   --> load_census_data/src/lib.rs:347:64
    |
347 | ...upation_counts, residents_workplace) = (population_counts.expect("Population Counts Table has not been loaded"), age_counts.expect("Ag...
    |                    ^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_residents_workplace`

warning: `load_census_data` (lib) generated 10 warnings
warning: unused import: `std::collections::HashMap`
  --> sim/src/disease.rs:21:5
   |
21 | use std::collections::HashMap;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::fs::File`
  --> sim/src/disease.rs:23:5
   |
23 | use std::fs::File;
   |     ^^^^^^^^^^^^^

warning: unused import: `std::hash::Hash`
  --> sim/src/disease.rs:24:5
   |
24 | use std::hash::Hash;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `BufWriter`
  --> sim/src/disease.rs:25:15
   |
25 | use std::io::{BufWriter, Write};
   |               ^^^^^^^^^

warning: unused import: `log::error`
  --> sim/src/disease.rs:27:5
   |
27 | use log::error;
   |     ^^^^^^^^^^

warning: unused import: `Deserialize`
  --> sim/src/disease.rs:28:13
   |
28 | use serde::{Deserialize, Serialize};
   |             ^^^^^^^^^^^

warning: unused import: `serde_json::to_writer`
  --> sim/src/disease.rs:29:5
   |
29 | use serde_json::to_writer;
   |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `uuid::Uuid`
  --> sim/src/disease.rs:30:5
   |
30 | use uuid::Uuid;
   |     ^^^^^^^^^^

warning: unused import: `crate::models::ID`
  --> sim/src/disease.rs:33:5
   |
33 | use crate::models::ID;
   |     ^^^^^^^^^^^^^^^^^

warning: unused import: `trace`
  --> sim/src/simulator_builder.rs:31:31
   |
31 | use log::{debug, error, info, trace, warn};
   |                               ^^^^^

warning: unused import: `format`
  --> sim/src/statistics.rs:22:25
   |
22 | use std::fmt::{Display, format, Formatter};
   |                         ^^^^^^

warning: unused import: `anyhow::Context`
  --> sim/src/statistics.rs:29:5
   |
29 | use anyhow::Context;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `error`
  --> sim/src/statistics.rs:30:11
   |
30 | use log::{error, info, warn};
   |           ^^^^^

warning: unused imports: `el`, `lo`
  --> sim/src/statistics.rs:31:26
   |
31 | use num_format::Locale::{el, lo};
   |                          ^^  ^^

warning: unused import: `crate::models::building::BuildingID`
  --> sim/src/statistics.rs:39:5
   |
39 | use crate::models::building::BuildingID;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::models::citizen::Citizen`
  --> sim/src/statistics.rs:40:5
   |
40 | use crate::models::citizen::Citizen;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::models::output_area::OutputAreaID`
  --> sim/src/statistics.rs:42:5
   |
42 | use crate::models::output_area::OutputAreaID;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::models::public_transport_route::PublicTransportID`
  --> sim/src/statistics.rs:43:5
   |
43 | use crate::models::public_transport_route::PublicTransportID;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unnecessary trailing semicolon
   --> sim/src/statistics.rs:190:13
    |
190 |             ;
    |             ^ help: remove this semicolon
    |
    = note: `#[warn(redundant_semicolons)]` on by default

warning: unused import: `Write`
  --> sim/src/disease.rs:25:26
   |
25 | use std::io::{BufWriter, Write};
   |                          ^^^^^

warning: unused variable: `e`
   --> sim/src/simulator_builder.rs:196:24
    |
196 |             if let Err(e) = || -> anyhow::Result<()> {
    |                        ^ help: if this is intentional, prefix it with an underscore: `_e`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `get_multiple`
   --> sim/src/simulator_builder.rs:391:33
    |
391 |             |citizen: &Citizen, get_multiple: bool| -> Result<Vec<&RawBuilding>, SimError> {
    |                                 ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_get_multiple`

warning: unused variable: `id`
   --> sim/src/statistics.rs:124:30
    |
124 |                 ID::Building(id) => {}
    |                              ^^ help: if this is intentional, prefix it with an underscore: `_id`

warning: unused variable: `entry`
   --> sim/src/statistics.rs:130:29
    |
130 |                     let mut entry = exposure_counts.entry("PublicTransport").or_default();
    |                             ^^^^^ help: if this is intentional, prefix it with an underscore: `_entry`

warning: unused variable: `code`
   --> sim/src/statistics.rs:131:25
    |
131 |                     let code = String::new() + id.source.code() + "-" + id.destination.code();
    |                         ^^^^ help: if this is intentional, prefix it with an underscore: `_code`

warning: unused variable: `time_step`
   --> sim/src/statistics.rs:184:13
    |
184 |         let time_step = self.current_time_step;
    |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `infected_citizens`
   --> sim/src/models/building.rs:202:30
    |
202 |     fn find_exposures(&self, infected_citizens: &Vec<CitizenID>) -> Vec<CitizenID> {
    |                              ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_infected_citizens`

warning: unused variable: `infected_citizens`
   --> sim/src/models/building.rs:278:30
    |
278 |     fn find_exposures(&self, infected_citizens: &Vec<CitizenID>) -> Vec<CitizenID> {
    |                              ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_infected_citizens`

warning: variable does not need to be mutable
   --> sim/src/simulator.rs:236:25
    |
236 |                     for mut citizen in citizens {
    |                         ----^^^^^^^
    |                         |
    |                         help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
   --> sim/src/simulator_builder.rs:139:13
    |
139 |         let mut output_areas = &mut self.output_areas;
    |             ----^^^^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> sim/src/simulator_builder.rs:155:21
    |
155 |                 let mut area = output_areas.get_mut(index).unwrap();
    |                     ----^^^^
    |                     |
    |                     help: remove this `mut`

warning: variable does not need to be mutable
   --> sim/src/simulator_builder.rs:190:13
    |
190 |         let mut citizen_output_area_lookup = &mut self.citizen_output_area_lookup;
    |             ----^^^^^^^^^^^^^^^^^^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> sim/src/simulator_builder.rs:639:21
    |
639 |                 let mut buildings =
    |                     ----^^^^^^^^^
    |                     |
    |                     help: remove this `mut`

warning: variable does not need to be mutable
   --> sim/src/simulator_builder.rs:789:14
    |
789 |         let (mut output_area_citizens, mut output_area_buildings, output_area_ids) = self
    |              ----^^^^^^^^^^^^^^^^^^^^
    |              |
    |              help: remove this `mut`

warning: variable does not need to be mutable
   --> sim/src/simulator_builder.rs:866:9
    |
866 |         mut citizen_ids: &mut Vec<Citizen>,
    |         ----^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> sim/src/simulator_builder.rs:913:13
    |
913 |         let mut required_space_per_occupation: EnumMap<OccupationType, usize> =
    |             ----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> sim/src/statistics.rs:121:17
    |
121 |             let mut entry = exposure_counts.entry("All").or_default();
    |                 ----^^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> sim/src/statistics.rs:126:25
    |
126 |                     let mut entry = exposure_counts.entry("OutputArea").or_default();
    |                         ----^^^^^
    |                         |
    |                         help: remove this `mut`

warning: variable does not need to be mutable
   --> sim/src/statistics.rs:130:25
    |
130 |                     let mut entry = exposure_counts.entry("PublicTransport").or_default();
    |                         ----^^^^^
    |                         |
    |                         help: remove this `mut`

warning: variable does not need to be mutable
   --> sim/src/statistics.rs:162:21
    |
162 | ...   let mut recording_entry = self.exposures_per_building_per_time_step.entry(area).or_default();//tatisticEntry::with_time_step(self.c...
    |           ----^^^^^^^^^^^^^^^
    |           |
    |           help: remove this `mut`

warning: variable does not need to be mutable
   --> sim/src/statistics.rs:178:13
    |
178 |         let mut current = self.global_stats.last_mut().expect("Need to call next() to start a recording!");
    |             ----^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> sim/src/statistics.rs:188:17
    |
188 |             let mut stat_entry = current_entry.entry(area_id).or_default();
    |                 ----^^^^^^^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> sim/src/statistics.rs:192:13
    |
192 |         let mut stat_entry = current_entry.entry(location).or_default();
    |             ----^^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: unused `Result` that must be used
   --> sim/src/simulator.rs:132:9
    |
132 |         self.statistics_recorder.next();
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `Result` that must be used
   --> sim/src/statistics.rs:115:9
    |
115 |         self.next();
    |         ^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled

warning: `sim` (lib) generated 45 warnings
    Finished release [optimized] target(s) in 0.34s
     Running `target/release/run 1946157112TYPE299 --directory=data --grid-size=250000 --simulate --use-cache`
 2022-03-10T19:03:30.313Z INFO  run > Using area: 1946157112TYPE299, Utilizing Cache: true, Allowing downloads: false
 2022-03-10T19:03:30.313Z INFO  run > Using mode simulate for area '1946157112TYPE299'
 2022-03-10T19:03:30.313Z INFO  run::load_data > Loading data from disk...
thread 'main' panicked at 'Failed to parse the count for WorkplaceResidential Record: ParseIntError { kind: Empty }', load_census_data/src/tables/resides_vs_workplace.rs:66:32
stack backtrace:
   0: rust_begin_unwind
             at /rustc/02072b482a8b5357f7fb5e5637444ae30e423c40/library/std/src/panicking.rs:498:5
   1: core::panicking::panic_fmt
             at /rustc/02072b482a8b5357f7fb5e5637444ae30e423c40/library/core/src/panicking.rs:107:14
   2: core::result::unwrap_failed
             at /rustc/02072b482a8b5357f7fb5e5637444ae30e423c40/library/core/src/result.rs:1613:5
   3: <load_census_data::tables::resides_vs_workplace::PreProcessingWorkplaceResidentialRecord as load_census_data::tables::resides_vs_workplace::PreProcessingWorkplaceResidentialTrait>::get_count
   4: <core::future::from_generator::GenFuture<T> as core::future::future::Future>::poll
   5: <core::future::from_generator::GenFuture<T> as core::future::future::Future>::poll
   6: <core::future::from_generator::GenFuture<T> as core::future::future::Future>::poll
   7: run::main::{{closure}}
   8: tokio::park::thread::CachedParkThread::block_on
   9: tokio::runtime::thread_pool::ThreadPool::block_on
  10: tokio::runtime::Runtime::block_on
  11: run::main
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
